syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "GenericMessages.proto";

package MicroservicesProtos;

service TimeInterval {
  rpc UpsertTimeInterval (UpsertTimeIntervalRequest) returns (GenericMessages.AsyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/UpsertTimeInterval"
      body: "*"
    };
  }
  rpc GetTimeInterval (GetTimeIntervalRequest) returns (GenericMessages.AsyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/GetTimeInterval"
      body: "*"
    };
  }
  rpc GetTimeIntervals (GetTimeIntervalsRequest) returns (GenericMessages.AsyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/GetTimeIntervals"
      body: "*"
    };
  }
  rpc DeleteTimeInterval (DeleteTimeIntervalRequest) returns (GenericMessages.AsyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/DeleteTimeInterval"
      body: "*"
    };
  }
  rpc CalculateTimeIntervalFee (CalculateTimeIntervalFeeRequest) returns (GenericMessages.AsyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/CalculateTimeIntervalFee"
      body: "*"
    };
  }
  rpc NotifyHandledRequest (GenericMessages.NotifyHandledRequestMsg) returns (GenericMessages.SyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/NotifyHandledRequest"
      body: "*"
    };
  }
  rpc GetNotifiedRequests (GenericMessages.GetNotifiedRequestsRequest) returns (GenericMessages.GetNotifiedRequestsResponse)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/GetNotifiedRequests"
      body: "*"
    };
  }
  rpc CanIHandle (GenericMessages.CanIHandleRequest) returns (GenericMessages.SyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/CanIHandle"
      body: "*"
    };
  }
  rpc CanICoordinate (GenericMessages.CanICoordinateRequest) returns (GenericMessages.SyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/CanICoordinate"
      body: "*"
    };
  }
  rpc ConsiderNodeCoordinator (GenericMessages.ConsiderNodeCoordinatorRequest) returns (GenericMessages.SyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/ConsiderNodeCoordinator"
      body: "*"
    };
  }
  rpc GetCoordinatorIp (GenericMessages.GetCoordinatorIpRequest) returns (GenericMessages.GetCoordinatorIpResponse)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/GetCoordinatorIp"
      body: "*"
    };
  }
  rpc AddClusterNode (GenericMessages.AddOrRemoveClusterNodeRequest) returns (GenericMessages.AsyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/AddClusterNode"
      body: "*"
    };
  }
  rpc RemoveClusterNode (GenericMessages.AddOrRemoveClusterNodeRequest) returns (GenericMessages.AsyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/RemoveClusterNode"
      body: "*"
    };
  }
  rpc NotifyNodePresence(GenericMessages.NotifyNodePresenceRequest) returns (GenericMessages.AsyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/NotifyNodePresence"
      body: "*"
    };
  }
    rpc SetDefaultOperationDelay(GenericMessages.SetDefaultOperationDelayRequest) returns (GenericMessages.AsyncResult)
  {
      option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/SetDefaultOperationDelay"
      body: "*"
    };
  }
  rpc IsAlive (GenericMessages.IsAliveRequest) returns (GenericMessages.SyncResult)
  {
	  option (google.api.http) = {
      post: "/HttpAPI/MicroservicesProtos/TimeInterval/IsAlive"
      body: "*"
    };
  }
}

//STR Requests
message UpsertTimeIntervalRequest {
  GenericMessages.GenericRequestData RequestCamp = 1;
  TimeIntervalType TimeInterval = 2;
}

message GetTimeIntervalRequest {
  GenericMessages.GenericRequestData RequestCamp = 1;
  int32 Id = 2;
}

message GetTimeIntervalsRequest {
  GenericMessages.GenericRequestData RequestCamp = 1;
}

message DeleteTimeIntervalRequest {
  GenericMessages.GenericRequestData RequestCamp = 1;
  int32 Id = 2;
}

message CalculateTimeIntervalFeeRequest {
  GenericMessages.GenericRequestData RequestCamp = 1;
  int64 Start = 2; //duration in seconds
  int64 End = 3;  //duration in seconds
}
//END Requests

//STR Responses
message UpsertTimeIntervalResponse {
  GenericMessages.OperationResult Result = 1;
  TimeIntervalType TimeInterval = 3;
}

message GetTimeIntervalResponse {
  GenericMessages.OperationResult Result = 1;
  TimeIntervalType TimeInterval = 2;
}

message GetTimeIntervalsResponse {
  GenericMessages.OperationResult Result = 1;
  repeated TimeIntervalType TimeInterval = 2;
}

message DeleteTimeIntervalResponse {
  GenericMessages.OperationResult Result = 1;
}

message CalculateTimeIntervalFeeResponse {
  GenericMessages.OperationResult Result = 1;
  double Fee = 2;
}

message TimeIntervalType {
   int32 Id = 1;
   int64 From = 2; //duration in seconds
   int64 To = 3;  //duration in seconds
   repeated TimeIntervalRuleType Rules = 4;
}

message TimeIntervalRuleType {
    int32 Priority = 1;
    double Amount = 2;
    int32 FrequencyIntervalPerAmount = 3;
    int32 TotalCoveredMinutes = 4;
}
//END Responses
