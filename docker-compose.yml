version: '3.4'

services:
  mongo:
    container_name: pricingsystem_mongodb
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_DATABASE: PricingSystemDB
    ports:
      - "5003:6379"
    networks:
      paymentMachinePricingSystem_network:
        ipv4_address: 172.18.0.2
    volumes:
      - /data/db
    command: ["mongod", "--port", "6379"]

  redis:
    container_name: dayrateservice_redis
    image: redis
    restart: always
    ports:
      - "5002:6379"
    networks:
      paymentMachinePricingSystem_network:
        ipv4_address: 172.18.0.3
    volumes:
      - /dayrateservice_redis/conf:/usr/local/etc/redis

  RequestHandlerMiddleware:
    container_name: ${DOCKER_REGISTRY-}requesthandlermiddleware
    image: requesthandlermiddleware
    restart: always
    build:
      context: .
      dockerfile: ./RequestHandlerMiddleware/Dockerfile
    environment:
      - ASPNETCORE_ENVIORNMENT=Development
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_URLS=http://+
    ports:
      - "5000:80"
    networks:
      paymentMachinePricingSystem_network:
        ipv4_address: 172.18.0.4
    volumes:
       - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets.ro
       - ${APPDATA}/ASP.NET/HTTPS:/root/.aspnet/https:ro
       - ${APPDATA}/ASP.NET/HTTP:/root/.aspnet/http:ro
 
  DayRateService:
    container_name: ${DOCKER_REGISTRY-}dayrateservice
    image: dayrateservice
    restart: always
    build:
      context: .
      dockerfile: ./DayRateService/Dockerfile
    environment:
      - ASPNETCORE_ENVIORNMENT=Development
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_URLS=http://+
    ports:
      - "8000:80"
    networks:
      paymentMachinePricingSystem_network:
        ipv4_address: 172.18.0.5
    volumes:
       - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets.ro
       - ${APPDATA}/ASP.NET/HTTPS:/root/.aspnet/https:ro
       - ${APPDATA}/ASP.NET/HTTP:/root/.aspnet/http:ro

  DayRateService1:
    container_name: ${DOCKER_REGISTRY-}dayrateservice1
    image: dayrateservice
    restart: always
    build:
      context: .
      dockerfile: ./DayRateService/Dockerfile
    environment:
      - ASPNETCORE_ENVIORNMENT=Development
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_URLS=http://+
    ports:
      - "7000:80"
    networks:
      paymentMachinePricingSystem_network:
        ipv4_address: 172.18.0.6
    volumes:
       - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets.ro
       - ${APPDATA}/ASP.NET/HTTPS:/root/.aspnet/https:ro
       - ${APPDATA}/ASP.NET/HTTP:/root/.aspnet/http:ro

  DayRateService2:
    container_name: ${DOCKER_REGISTRY-}dayrateservice2
    image: dayrateservice
    restart: always
    build:
      context: .
      dockerfile: ./DayRateService/Dockerfile
    environment:
      - ASPNETCORE_ENVIORNMENT=Development
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_URLS=http://+
    ports:
      - "9000:80"
    networks:
      paymentMachinePricingSystem_network:
        ipv4_address: 172.18.0.7
    volumes:
       - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets.ro
       - ${APPDATA}/ASP.NET/HTTPS:/root/.aspnet/https:ro
       - ${APPDATA}/ASP.NET/HTTP:/root/.aspnet/http:ro

#first we need to execute: docker network create --driver=bridge --subnet=172.18.0.0/24 paymentMachinePricingSystem_network
networks:
  paymentMachinePricingSystem_network:
    external: true
    # driver: bridge
    # ipam:
    #   config:
    #     - subnet: 172.18.0.0/16
    #       gateway: 172.18.0.1

  # WeekPayModelService:
  #   image: ${DOCKER_REGISTRY-}WeekPayModelService
  #   container_name: WeekPayModelServiceContainer
  #   build:
  #     context: .
  #     dockerfile: WeekPayModelService/Dockerfile

  # TimeIntervalService:
  #   image: ${DOCKER_REGISTRY-}TimeIntervalService
  #   container_name: TimeIntervalServiceContainer
  #   build:
  #     context: .
  #     dockerfile: TimeIntervalService/Dockerfile
